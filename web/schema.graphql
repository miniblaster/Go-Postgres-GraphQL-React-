type Assistant implements Node {
  createdAt: CreatedTimestamptz!
  dateOfBirth: Date!
  email: EmailAddress!
  firstName: String!
  gender: Gender!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  lastName: String!
  rowId: UUID!
  telephone: String
  updatedAt: UpdatedTimestamptz!

  """Reads a single `User` that is related to this `Assistant`."""
  userByUserRowId: User
  userRowId: UUID
}

"""
A condition to be used against `Assistant` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AssistantCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `dateOfBirth` field."""
  dateOfBirth: Date

  """Checks for equality with the object’s `email` field."""
  email: EmailAddress

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `gender` field."""
  gender: Gender

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `telephone` field."""
  telephone: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `userRowId` field."""
  userRowId: UUID
}

"""A connection to a list of `Assistant` values."""
type AssistantsConnection {
  """
  A list of edges which contains the `Assistant` and cursor to aid in pagination.
  """
  edges: [AssistantsEdge!]!

  """A list of `Assistant` objects."""
  nodes: [Assistant!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Assistant` you could get from the connection."""
  totalCount: Int!
}

"""A `Assistant` edge in the connection."""
type AssistantsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Assistant` at the end of the edge."""
  node: Assistant!
}

"""Methods to use when ordering `Assistant`."""
enum AssistantsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DATE_OF_BIRTH_ASC
  DATE_OF_BIRTH_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TELEPHONE_ASC
  TELEPHONE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

"""Binary data encoded using Base64"""
scalar Base64EncodedBinary

"""A connection to a list of `CaseHistory` values."""
type CaseHistoriesConnection {
  """
  A list of edges which contains the `CaseHistory` and cursor to aid in pagination.
  """
  edges: [CaseHistoriesEdge!]!

  """A list of `CaseHistory` objects."""
  nodes: [CaseHistory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CaseHistory` you could get from the connection."""
  totalCount: Int!
}

"""A `CaseHistory` edge in the connection."""
type CaseHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseHistory` at the end of the edge."""
  node: CaseHistory!
}

"""Methods to use when ordering `CaseHistory`."""
enum CaseHistoriesOrderBy {
  ACCOMPANIED_BY_ASC
  ACCOMPANIED_BY_DESC
  ADAPTED_EDUCATION_PROGRAM_ASC
  ADAPTED_EDUCATION_PROGRAM_DESC
  ADOPTION_AGE_ASC
  ADOPTION_AGE_DESC
  AGE_DURING_LOSS_OF_CLOSE_INDIVIDUAL_ASC
  AGE_DURING_LOSS_OF_CLOSE_INDIVIDUAL_DESC
  ARRIVAL_REASON_ASC
  ARRIVAL_REASON_DESC
  ATTENDS_KINDERGARTEN_ASC
  ATTENDS_KINDERGARTEN_DESC
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CASE_STUDY_TREATMENT_ID_ASC
  CASE_STUDY_TREATMENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DIAGNOSED_INTELECTUAL_DEVELOPMENT_PROBLEMS_ASC
  DIAGNOSED_INTELECTUAL_DEVELOPMENT_PROBLEMS_DESC
  DIVORCED_PARENTS_ASC
  DIVORCED_PARENTS_DESC
  DIVORCE_OUTCOME_ASC
  DIVORCE_OUTCOME_DESC
  EARLIER_PROFESSIONAL_HELP_ASC
  EARLIER_PROFESSIONAL_HELP_DESC
  FAMILY_HEREDITY_ASC
  FAMILY_HEREDITY_DESC
  FURTHER_ABUSES_ASC
  FURTHER_ABUSES_DESC
  ID_ASC
  ID_DESC
  INDIVIDUALIZED_EDUCATION_PROGRAM_ASC
  INDIVIDUALIZED_EDUCATION_PROGRAM_DESC
  INVOLVED_REFERRAL_ASC
  INVOLVED_REFERRAL_DESC
  LIVES_WITH_ASC
  LIVES_WITH_DESC
  LOSS_OF_CLOSE_INDIVIDUAL_ASC
  LOSS_OF_CLOSE_INDIVIDUAL_DESC
  NATURAL
  NUMBER_OF_ADOPTIONS_ASC
  NUMBER_OF_ADOPTIONS_DESC
  PARENTS_IN_JAIL_ASC
  PARENTS_IN_JAIL_DESC
  PREVIOUS_TREATMENT_ASC
  PREVIOUS_TREATMENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PTSP_ASC
  PTSP_DESC
  REASON_OF_MULTIPLE_ADOPTIONS_ASC
  REASON_OF_MULTIPLE_ADOPTIONS_DESC
  REFERRAL_ASC
  REFERRAL_DESC
  REFERRAL_DIAGNOSIS_ASC
  REFERRAL_DIAGNOSIS_DESC
  REPORTED_FURTHER_ABUSES_ASC
  REPORTED_FURTHER_ABUSES_DESC
  SCHOOL_MARK_ASC
  SCHOOL_MARK_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

type CaseHistory implements Node {
  """With whom was the patient accopanied by."""
  accompaniedBy: CaseHistoryAccompaniedByType
  adaptedEducationProgram: Boolean
  adoptionAge: Float
  ageDuringLossOfCloseIndividual: Float
  arrivalReason: [CaseHistoryArrivalReasonType]
  attendsKindergarten: Boolean

  """Reads and enables pagination through a set of `CaseHistoryFile`."""
  caseHistoryFilesByCaseHistoryRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistoryFile`."""
    orderBy: [CaseHistoryFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoryFilesConnection!

  """Reads a single `CaseStudy` that is related to this `CaseHistory`."""
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyRowId: UUID!

  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseHistory`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment
  caseStudyTreatmentRowId: UUID
  createdAt: CreatedTimestamptz!
  createdBy: UUID!
  diagnosedIntelectualDevelopmentProblems: Boolean
  divorceOutcome: CaseHistoryDivorceOutcomeType
  divorcedParents: CaseHistoryDivorcedParentsType
  earlierProfessionalHelp: [MentalHealthProfessionalType]
  familyHeredity: String
  furtherAbuses: [CaseHistoryAbuseType]

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  individualizedEducationProgram: Boolean
  involvedReferral: Boolean

  """With whom does the patient live with."""
  livesWith: [CaseHistoryLivesWithType]
  lossOfCloseIndividual: [CaseHistoryIndividualType]
  numberOfAdoptions: Int
  parentsInJail: CaseHistoryParentsInJailType
  previousTreatment: String
  ptsp: String
  reasonOfMultipleAdoptions: [CaseHistoryReasonOfMultipleAdoptionsType]
  referral: [CaseHistoryReferralType]
  referralDiagnosis: String
  reportedFurtherAbuses: CaseHistoryReportedAbuseType
  rowId: UUID!
  schoolMark: Int
  updatedAt: UpdatedTimestamptz!
  updatedBy: UUID

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByUpdatedBy: User
}

enum CaseHistoryAbuseType {
  ABUSE_WITNESS
  BULLYING
  CYBER_BULLYING
  EMOTIONAL_ABUSE
  NEGLECTION
  OTHER
  PARENT_MANIPULATION
  PHYSICAL_ABUSE
  SEXUAL_ABUSE
}

enum CaseHistoryAccompaniedByType {
  FAMILY
  FATHER
  MOTHER
  NO_ONE
  PARENTS
  PARTNER
}

enum CaseHistoryArrivalReasonType {
  ABUSE_WITNESS
  ADDICTION
  ADHD
  ANXIETY
  ATTENTION_PROBLEMS
  BEHAVIOURAL_PROBLEMS
  BULLYING
  COMMUNICATION_PROBLEMS
  COUPLE_PROBLEMS
  CYBER_BULLYING
  DEPRESION_SYMPTOMS
  DIVORCE
  DYSGRAPHIA
  DYSLEXIA
  EMOTIONAL_ABUSE
  EMOTIONAL_PROBLEMS
  GRIEVE
  LEARNING_PROBLEMS
  LOSS
  NEGLECTION
  NEURO_DEVELOPMENT_DISORDER
  OTHER
  PARENT_MANIPULATION
  PHYSICAL_ABUSE
  SEXUAL_ABUSE
  SLEEP_DEFICIENCY
  SUICIDAL_THOUGHTS
  TALKING_ISSUES
  TRAUMA
}

"""
A condition to be used against `CaseHistory` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CaseHistoryCondition {
  """Checks for equality with the object’s `accompaniedBy` field."""
  accompaniedBy: CaseHistoryAccompaniedByType

  """Checks for equality with the object’s `adaptedEducationProgram` field."""
  adaptedEducationProgram: Boolean

  """Checks for equality with the object’s `adoptionAge` field."""
  adoptionAge: Float

  """
  Checks for equality with the object’s `ageDuringLossOfCloseIndividual` field.
  """
  ageDuringLossOfCloseIndividual: Float

  """Checks for equality with the object’s `arrivalReason` field."""
  arrivalReason: [CaseHistoryArrivalReasonType]

  """Checks for equality with the object’s `attendsKindergarten` field."""
  attendsKindergarten: Boolean

  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `caseStudyTreatmentRowId` field."""
  caseStudyTreatmentRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """
  Checks for equality with the object’s `diagnosedIntelectualDevelopmentProblems` field.
  """
  diagnosedIntelectualDevelopmentProblems: Boolean

  """Checks for equality with the object’s `divorceOutcome` field."""
  divorceOutcome: CaseHistoryDivorceOutcomeType

  """Checks for equality with the object’s `divorcedParents` field."""
  divorcedParents: CaseHistoryDivorcedParentsType

  """Checks for equality with the object’s `earlierProfessionalHelp` field."""
  earlierProfessionalHelp: [MentalHealthProfessionalType]

  """Checks for equality with the object’s `familyHeredity` field."""
  familyHeredity: String

  """Checks for equality with the object’s `furtherAbuses` field."""
  furtherAbuses: [CaseHistoryAbuseType]

  """
  Checks for equality with the object’s `individualizedEducationProgram` field.
  """
  individualizedEducationProgram: Boolean

  """Checks for equality with the object’s `involvedReferral` field."""
  involvedReferral: Boolean

  """Checks for equality with the object’s `livesWith` field."""
  livesWith: [CaseHistoryLivesWithType]

  """Checks for equality with the object’s `lossOfCloseIndividual` field."""
  lossOfCloseIndividual: [CaseHistoryIndividualType]

  """Checks for equality with the object’s `numberOfAdoptions` field."""
  numberOfAdoptions: Int

  """Checks for equality with the object’s `parentsInJail` field."""
  parentsInJail: CaseHistoryParentsInJailType

  """Checks for equality with the object’s `previousTreatment` field."""
  previousTreatment: String

  """Checks for equality with the object’s `ptsp` field."""
  ptsp: String

  """
  Checks for equality with the object’s `reasonOfMultipleAdoptions` field.
  """
  reasonOfMultipleAdoptions: [CaseHistoryReasonOfMultipleAdoptionsType]

  """Checks for equality with the object’s `referral` field."""
  referral: [CaseHistoryReferralType]

  """Checks for equality with the object’s `referralDiagnosis` field."""
  referralDiagnosis: String

  """Checks for equality with the object’s `reportedFurtherAbuses` field."""
  reportedFurtherAbuses: CaseHistoryReportedAbuseType

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `schoolMark` field."""
  schoolMark: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

enum CaseHistoryDivorceOutcomeType {
  HIGH_CONFLICT
  LOW_CONFLICT
  MEDIUM_CONFLICT
  NO_CONFLICT
  UNKNOWN
}

enum CaseHistoryDivorcedParentsType {
  IN_PROCESS
  NO
  YES
}

type CaseHistoryFile implements Node {
  """
  Reads a single `CaseHistory` that is related to this `CaseHistoryFile`.
  """
  caseHistoryByCaseHistoryRowId: CaseHistory!
  caseHistoryRowId: UUID!
  createdAt: CreatedTimestamptz!

  """Reads a single `File` that is related to this `CaseHistoryFile`."""
  fileByFileRowId: File!
  fileRowId: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
}

"""
A condition to be used against `CaseHistoryFile` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CaseHistoryFileCondition {
  """Checks for equality with the object’s `caseHistoryRowId` field."""
  caseHistoryRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `fileRowId` field."""
  fileRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""A connection to a list of `CaseHistoryFile` values."""
type CaseHistoryFilesConnection {
  """
  A list of edges which contains the `CaseHistoryFile` and cursor to aid in pagination.
  """
  edges: [CaseHistoryFilesEdge!]!

  """A list of `CaseHistoryFile` objects."""
  nodes: [CaseHistoryFile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseHistoryFile` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseHistoryFile` edge in the connection."""
type CaseHistoryFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseHistoryFile` at the end of the edge."""
  node: CaseHistoryFile!
}

"""Methods to use when ordering `CaseHistoryFile`."""
enum CaseHistoryFilesOrderBy {
  CASE_HISTORY_ID_ASC
  CASE_HISTORY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FILE_ID_ASC
  FILE_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum CaseHistoryIndividualType {
  AUNT
  BROTHER
  COUSIN
  FATHER
  FOSTER_FATHER
  FOSTER_MOTHER
  FRIEND
  GRANDFATHER
  GRANDMOTHER
  LOVER
  MOTHER
  SISTER
  STEP_BROTHER
  STEP_FATHER
  STEP_MOTHER
  STEP_SISTER
  UNCLE
}

enum CaseHistoryLivesWithType {
  ALONE
  AUNT
  BROTHER
  COUSIN
  FATHER
  FOSTER_FATHER
  FOSTER_HOUSE
  FOSTER_MOTHER
  GRANDFATHER
  GRANDMOTHER
  MOTHER
  SISTER
  STEP_BROTHER
  STEP_FATHER
  STEP_MOTHER
  STEP_SISTER
  UNCLE
}

enum CaseHistoryParentsInJailType {
  FATHER
  FATHER_AND_MOTHER
  MOTHER
}

enum CaseHistoryReasonOfMultipleAdoptionsType {
  ABUSE
  LOSS_OF_FOSTER_PARENT
  NEGLECTION
  OTHER
}

enum CaseHistoryReferralType {
  COURT
  HOSPITAL
  KINDERGARTEN
  MENTAL_HEALTH_CENTER
  OTHER
  PEDIATRIST
  POLICE
  PSYCHIATRIST
  PSYCHOTHERAPIST
  SCHOOL
  SELF
  SOCIAL_WORK_CENTER
}

enum CaseHistoryReportedAbuseType {
  COURT
  NOT_REPORTED
  SOCIAL_WORK_CENTER
}

"""A connection to a list of `CaseStudy` values."""
type CaseStudiesConnection {
  """
  A list of edges which contains the `CaseStudy` and cursor to aid in pagination.
  """
  edges: [CaseStudiesEdge!]!

  """A list of `CaseStudy` objects."""
  nodes: [CaseStudy!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CaseStudy` you could get from the connection."""
  totalCount: Int!
}

"""A `CaseStudy` edge in the connection."""
type CaseStudiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudy` at the end of the edge."""
  node: CaseStudy!
}

"""Methods to use when ordering `CaseStudy`."""
enum CaseStudiesOrderBy {
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

type CaseStudy implements Node {
  """Reads and enables pagination through a set of `CaseHistory`."""
  caseHistoriesByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesConnection!

  """
  Reads a single `CaseStudyConclusion` that is related to this `CaseStudy`.
  """
  caseStudyConclusionByCaseStudyRowId: CaseStudyConclusion

  """Reads and enables pagination through a set of `CaseStudyConclusion`."""
  caseStudyConclusionsByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsConnection! @deprecated(reason: "Please use caseStudyConclusionByCaseStudyRowId instead")

  """
  Reads and enables pagination through a set of `CaseStudyMentalHealthProfessional`.
  """
  caseStudyMentalHealthProfessionalsByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyMentalHealthProfessional`."""
    orderBy: [CaseStudyMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyMentalHealthProfessionalsConnection!

  """Reads and enables pagination through a set of `CaseStudyRelation`."""
  caseStudyRelationsByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyRelation`."""
    orderBy: [CaseStudyRelationsOrderBy!] = [NATURAL]
  ): CaseStudyRelationsConnection!

  """Reads and enables pagination through a set of `CaseStudyRelation`."""
  caseStudyRelationsByRelatedCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyRelation`."""
    orderBy: [CaseStudyRelationsOrderBy!] = [NATURAL]
  ): CaseStudyRelationsConnection!

  """Reads and enables pagination through a set of `CaseStudyTreatment`."""
  caseStudyTreatmentsByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsConnection!

  """Reads a single `Client` that is related to this `CaseStudy`."""
  clientByClientRowId: Client
  clientRowId: UUID
  createdAt: CreatedTimestamptz!
  createdBy: UUID!

  """Reads a single `Group` that is related to this `CaseStudy`."""
  groupByGroupRowId: Group
  groupRowId: UUID

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads and enables pagination through a set of `MultidisciplinaryDiagnostic`.
  """
  multidisciplinaryDiagnosticsByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryDiagnosticCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryDiagnostic`."""
    orderBy: [MultidisciplinaryDiagnosticsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryDiagnosticsConnection!

  """
  Reads and enables pagination through a set of `MultidisciplinaryTherapy`.
  """
  multidisciplinaryTherapiesByCaseStudyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryTherapyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryTherapy`."""
    orderBy: [MultidisciplinaryTherapiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryTherapiesConnection!
  rowId: UUID!
  title: String!
  updatedAt: UpdatedTimestamptz!
  updatedBy: UUID

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByUpdatedBy: User
}

type CaseStudyConclusion implements Node {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyConclusion`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!

  """
  Reads and enables pagination through a set of `CaseStudyConclusionFile`.
  """
  caseStudyConclusionFilesByCaseStudyConclusionRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusionFile`."""
    orderBy: [CaseStudyConclusionFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionFilesConnection!
  caseStudyRowId: UUID!
  concludedAt: Datetime!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!
  description: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
  type: CaseStudyConclusionType!
  updatedAt: UpdatedTimestamptz!
  updatedBy: UUID

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `CaseStudyConclusion` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CaseStudyConclusionCondition {
  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `concludedAt` field."""
  concludedAt: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `type` field."""
  type: CaseStudyConclusionType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

type CaseStudyConclusionFile implements Node {
  """
  Reads a single `CaseStudyConclusion` that is related to this `CaseStudyConclusionFile`.
  """
  caseStudyConclusionByCaseStudyConclusionRowId: CaseStudyConclusion!
  caseStudyConclusionRowId: UUID!
  createdAt: CreatedTimestamptz!

  """
  Reads a single `File` that is related to this `CaseStudyConclusionFile`.
  """
  fileByFileRowId: File!
  fileRowId: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
}

"""
A condition to be used against `CaseStudyConclusionFile` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input CaseStudyConclusionFileCondition {
  """
  Checks for equality with the object’s `caseStudyConclusionRowId` field.
  """
  caseStudyConclusionRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `fileRowId` field."""
  fileRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""A connection to a list of `CaseStudyConclusionFile` values."""
type CaseStudyConclusionFilesConnection {
  """
  A list of edges which contains the `CaseStudyConclusionFile` and cursor to aid in pagination.
  """
  edges: [CaseStudyConclusionFilesEdge!]!

  """A list of `CaseStudyConclusionFile` objects."""
  nodes: [CaseStudyConclusionFile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseStudyConclusionFile` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseStudyConclusionFile` edge in the connection."""
type CaseStudyConclusionFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudyConclusionFile` at the end of the edge."""
  node: CaseStudyConclusionFile!
}

"""Methods to use when ordering `CaseStudyConclusionFile`."""
enum CaseStudyConclusionFilesOrderBy {
  CASE_STUDY_CONCLUSION_ID_ASC
  CASE_STUDY_CONCLUSION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FILE_ID_ASC
  FILE_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum CaseStudyConclusionType {
  CANCELLATION_BY_CLIENT
  CANCELLATION_BY_PARENT
  FURTHER_REFERRAL
  TREATMENT_COMPLETION
}

"""A connection to a list of `CaseStudyConclusion` values."""
type CaseStudyConclusionsConnection {
  """
  A list of edges which contains the `CaseStudyConclusion` and cursor to aid in pagination.
  """
  edges: [CaseStudyConclusionsEdge!]!

  """A list of `CaseStudyConclusion` objects."""
  nodes: [CaseStudyConclusion!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseStudyConclusion` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseStudyConclusion` edge in the connection."""
type CaseStudyConclusionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudyConclusion` at the end of the edge."""
  node: CaseStudyConclusion!
}

"""Methods to use when ordering `CaseStudyConclusion`."""
enum CaseStudyConclusionsOrderBy {
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CONCLUDED_AT_ASC
  CONCLUDED_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A condition to be used against `CaseStudy` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CaseStudyCondition {
  """Checks for equality with the object’s `clientRowId` field."""
  clientRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `groupRowId` field."""
  groupRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

type CaseStudyMentalHealthProfessional implements Node {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyRowId: UUID!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `MentalHealthProfessional` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  mentalHealthProfessionalByMentalHealthProfessionalRowId: MentalHealthProfessional!
  mentalHealthProfessionalRowId: UUID!
  primary: Boolean!
  rowId: UUID!

  """
  Reads a single `User` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  userByCreatedBy: User!
}

"""
A condition to be used against `CaseStudyMentalHealthProfessional` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input CaseStudyMentalHealthProfessionalCondition {
  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """
  Checks for equality with the object’s `mentalHealthProfessionalRowId` field.
  """
  mentalHealthProfessionalRowId: UUID

  """Checks for equality with the object’s `primary` field."""
  primary: Boolean

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""A connection to a list of `CaseStudyMentalHealthProfessional` values."""
type CaseStudyMentalHealthProfessionalsConnection {
  """
  A list of edges which contains the `CaseStudyMentalHealthProfessional` and cursor to aid in pagination.
  """
  edges: [CaseStudyMentalHealthProfessionalsEdge!]!

  """A list of `CaseStudyMentalHealthProfessional` objects."""
  nodes: [CaseStudyMentalHealthProfessional!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseStudyMentalHealthProfessional` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseStudyMentalHealthProfessional` edge in the connection."""
type CaseStudyMentalHealthProfessionalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudyMentalHealthProfessional` at the end of the edge."""
  node: CaseStudyMentalHealthProfessional!
}

"""Methods to use when ordering `CaseStudyMentalHealthProfessional`."""
enum CaseStudyMentalHealthProfessionalsOrderBy {
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  MENTAL_HEALTH_PROFESSIONAL_ID_ASC
  MENTAL_HEALTH_PROFESSIONAL_ID_DESC
  NATURAL
  PRIMARY_ASC
  PRIMARY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CaseStudyRelation {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyRelation`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!

  """
  Reads a single `CaseStudy` that is related to this `CaseStudyRelation`.
  """
  caseStudyByRelatedCaseStudyRowId: CaseStudy!
  caseStudyRowId: UUID!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!
  description: String
  relatedCaseStudyRowId: UUID!

  """Reads a single `User` that is related to this `CaseStudyRelation`."""
  userByCreatedBy: User!
}

"""
A condition to be used against `CaseStudyRelation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CaseStudyRelationCondition {
  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `relatedCaseStudyRowId` field."""
  relatedCaseStudyRowId: UUID
}

"""A connection to a list of `CaseStudyRelation` values."""
type CaseStudyRelationsConnection {
  """
  A list of edges which contains the `CaseStudyRelation` and cursor to aid in pagination.
  """
  edges: [CaseStudyRelationsEdge!]!

  """A list of `CaseStudyRelation` objects."""
  nodes: [CaseStudyRelation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseStudyRelation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseStudyRelation` edge in the connection."""
type CaseStudyRelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudyRelation` at the end of the edge."""
  node: CaseStudyRelation!
}

"""Methods to use when ordering `CaseStudyRelation`."""
enum CaseStudyRelationsOrderBy {
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  NATURAL
  RELATED_CASE_STUDY_ID_ASC
  RELATED_CASE_STUDY_ID_DESC
}

type CaseStudyTreatment implements Node {
  """Reads and enables pagination through a set of `CaseHistory`."""
  caseHistoriesByCaseStudyTreatmentRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesConnection!

  """
  Reads a single `CaseStudy` that is related to this `CaseStudyTreatment`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyRowId: UUID!

  """
  Reads and enables pagination through a set of `CaseStudyTreatmentFile`.
  """
  caseStudyTreatmentFilesByCaseStudyTreatmentRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatmentFile`."""
    orderBy: [CaseStudyTreatmentFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentFilesConnection!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!
  description: String
  endedAt: Datetime!
  external: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads and enables pagination through a set of `MultidisciplinaryDiagnostic`.
  """
  multidisciplinaryDiagnosticsByCaseStudyTreatmentRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryDiagnosticCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryDiagnostic`."""
    orderBy: [MultidisciplinaryDiagnosticsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryDiagnosticsConnection!

  """
  Reads and enables pagination through a set of `MultidisciplinaryTherapy`.
  """
  multidisciplinaryTherapiesByCaseStudyTreatmentRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryTherapyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryTherapy`."""
    orderBy: [MultidisciplinaryTherapiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryTherapiesConnection!
  privateDescription: String
  rowId: UUID!
  score: Int
  startedAt: Datetime!
  title: String!
  updatedAt: UpdatedTimestamptz!
  updatedBy: UUID

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByUpdatedBy: User
}

"""
A condition to be used against `CaseStudyTreatment` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CaseStudyTreatmentCondition {
  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `endedAt` field."""
  endedAt: Datetime

  """Checks for equality with the object’s `external` field."""
  external: Boolean

  """Checks for equality with the object’s `privateDescription` field."""
  privateDescription: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `score` field."""
  score: Int

  """Checks for equality with the object’s `startedAt` field."""
  startedAt: Datetime

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

type CaseStudyTreatmentFile implements Node {
  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseStudyTreatmentFile`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment!
  caseStudyTreatmentRowId: UUID!
  createdAt: CreatedTimestamptz!

  """
  Reads a single `File` that is related to this `CaseStudyTreatmentFile`.
  """
  fileByFileRowId: File!
  fileRowId: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: UUID!
}

"""
A condition to be used against `CaseStudyTreatmentFile` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CaseStudyTreatmentFileCondition {
  """Checks for equality with the object’s `caseStudyTreatmentRowId` field."""
  caseStudyTreatmentRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `fileRowId` field."""
  fileRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""A connection to a list of `CaseStudyTreatmentFile` values."""
type CaseStudyTreatmentFilesConnection {
  """
  A list of edges which contains the `CaseStudyTreatmentFile` and cursor to aid in pagination.
  """
  edges: [CaseStudyTreatmentFilesEdge!]!

  """A list of `CaseStudyTreatmentFile` objects."""
  nodes: [CaseStudyTreatmentFile!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseStudyTreatmentFile` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseStudyTreatmentFile` edge in the connection."""
type CaseStudyTreatmentFilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudyTreatmentFile` at the end of the edge."""
  node: CaseStudyTreatmentFile!
}

"""Methods to use when ordering `CaseStudyTreatmentFile`."""
enum CaseStudyTreatmentFilesOrderBy {
  CASE_STUDY_TREATMENT_ID_ASC
  CASE_STUDY_TREATMENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FILE_ID_ASC
  FILE_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `CaseStudyTreatment` values."""
type CaseStudyTreatmentsConnection {
  """
  A list of edges which contains the `CaseStudyTreatment` and cursor to aid in pagination.
  """
  edges: [CaseStudyTreatmentsEdge!]!

  """A list of `CaseStudyTreatment` objects."""
  nodes: [CaseStudyTreatment!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CaseStudyTreatment` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CaseStudyTreatment` edge in the connection."""
type CaseStudyTreatmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CaseStudyTreatment` at the end of the edge."""
  node: CaseStudyTreatment!
}

"""Methods to use when ordering `CaseStudyTreatment`."""
enum CaseStudyTreatmentsOrderBy {
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ENDED_AT_ASC
  ENDED_AT_DESC
  EXTERNAL_ASC
  EXTERNAL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRIVATE_DESCRIPTION_ASC
  PRIVATE_DESCRIPTION_DESC
  SCORE_ASC
  SCORE_DESC
  STARTED_AT_ASC
  STARTED_AT_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

type Client implements Node {
  address: String!

  """Reads and enables pagination through a set of `CaseStudy`."""
  caseStudiesByClientRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesConnection!

  """Reads and enables pagination through a set of `CaseStudyTreatment`."""
  caseStudyTreatmentsByCaseStudiesClientRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): CaseStudyTreatmentsConnection!
  city: String!

  """
  Reads and enables pagination through a set of `ClientAssignedMentalHealthProfessional`.
  """
  clientAssignedMentalHealthProfessionalsByClientRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientAssignedMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `ClientAssignedMentalHealthProfessional`.
    """
    orderBy: [ClientAssignedMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientAssignedMentalHealthProfessionalsConnection!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!
  dateOfBirth: Date!
  discrete: Boolean!
  email: EmailAddress
  firstName: String!
  fullName: String!
  fulltext: String!
  gender: Gender!

  """Reads and enables pagination through a set of `GroupClient`."""
  groupClientsByClientRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupClientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupClient`."""
    orderBy: [GroupClientsOrderBy!] = [NATURAL]
  ): GroupClientsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  lastName: String!
  latestAssignedMentalHealthProfessional: ClientAssignedMentalHealthProfessional
  number: Int!
  rowId: UUID!
  sentBy: ClientSentBy!
  telephone: String!
  updatedAt: UpdatedTimestamptz!
  updatedBy: UUID

  """Reads a single `User` that is related to this `Client`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `Client`."""
  userByUpdatedBy: User
}

type ClientAssignedMentalHealthProfessional implements Node {
  """
  Reads a single `Client` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  clientByClientRowId: Client!
  clientRowId: UUID!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `MentalHealthProfessional` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  mentalHealthProfessionalByMentalHealthProfessionalRowId: MentalHealthProfessional!
  mentalHealthProfessionalRowId: UUID!
  rowId: UUID!

  """
  Reads a single `User` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  userByCreatedBy: User!
}

"""
A condition to be used against `ClientAssignedMentalHealthProfessional` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ClientAssignedMentalHealthProfessionalCondition {
  """Checks for equality with the object’s `clientRowId` field."""
  clientRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """
  Checks for equality with the object’s `mentalHealthProfessionalRowId` field.
  """
  mentalHealthProfessionalRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""
A connection to a list of `ClientAssignedMentalHealthProfessional` values.
"""
type ClientAssignedMentalHealthProfessionalsConnection {
  """
  A list of edges which contains the `ClientAssignedMentalHealthProfessional` and cursor to aid in pagination.
  """
  edges: [ClientAssignedMentalHealthProfessionalsEdge!]!

  """A list of `ClientAssignedMentalHealthProfessional` objects."""
  nodes: [ClientAssignedMentalHealthProfessional!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ClientAssignedMentalHealthProfessional` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ClientAssignedMentalHealthProfessional` edge in the connection."""
type ClientAssignedMentalHealthProfessionalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ClientAssignedMentalHealthProfessional` at the end of the edge."""
  node: ClientAssignedMentalHealthProfessional!
}

"""Methods to use when ordering `ClientAssignedMentalHealthProfessional`."""
enum ClientAssignedMentalHealthProfessionalsOrderBy {
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  MENTAL_HEALTH_PROFESSIONAL_ID_ASC
  MENTAL_HEALTH_PROFESSIONAL_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Client` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ClientCondition {
  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `dateOfBirth` field."""
  dateOfBirth: Date

  """Checks for equality with the object’s `discrete` field."""
  discrete: Boolean

  """Checks for equality with the object’s `email` field."""
  email: EmailAddress

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `fulltext` field."""
  fulltext: String

  """Checks for equality with the object’s `gender` field."""
  gender: Gender

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `number` field."""
  number: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `sentBy` field."""
  sentBy: ClientSentBy

  """Checks for equality with the object’s `telephone` field."""
  telephone: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: UUID
}

enum ClientSentBy {
  CLINIC
  COURT
  KINDERGARTEN
  MENTAL_HEALTH_CENTER
  PEDIATRICIAN
  POLICE
  PSYCHIATRIST
  PSYCHOTHERAPIST
  REFERAL
  SCHOOL
  SELF_INITIATIVE
  SOCIAL_WORK_CENTER
}

"""A connection to a list of `Client` values."""
type ClientsConnection {
  """
  A list of edges which contains the `Client` and cursor to aid in pagination.
  """
  edges: [ClientsEdge!]!

  """A list of `Client` objects."""
  nodes: [Client!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Client` you could get from the connection."""
  totalCount: Int!
}

"""A `Client` edge in the connection."""
type ClientsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Client` at the end of the edge."""
  node: Client!
}

"""Methods to use when ordering `Client`."""
enum ClientsOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  CITY_ASC
  CITY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DATE_OF_BIRTH_ASC
  DATE_OF_BIRTH_DESC
  DISCRETE_ASC
  DISCRETE_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  FULLTEXT_ASC
  FULLTEXT_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  NUMBER_ASC
  NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SENT_BY_ASC
  SENT_BY_DESC
  TELEPHONE_ASC
  TELEPHONE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `createCaseHistoryFile` mutation."""
input CreateCaseHistoryFileInput {
  caseHistoryRowId: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fileData: Base64EncodedBinary!
  fileName: String!
}

"""The output of our `createCaseHistoryFile` mutation."""
type CreateCaseHistoryFilePayload {
  """
  Reads a single `CaseHistory` that is related to this `CaseHistoryFile`.
  """
  caseHistoryByCaseHistoryRowId: CaseHistory!
  caseHistoryFile: CaseHistoryFile

  """An edge for our `CaseHistoryFile`. May be used by Relay 1."""
  caseHistoryFileEdge(
    """The method to use when ordering `CaseHistoryFile`."""
    orderBy: [CaseHistoryFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoryFilesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `File` that is related to this `CaseHistoryFile`."""
  fileByFileRowId: File!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createCaseHistory` mutation."""
input CreateCaseHistoryInput {
  accompaniedBy: CaseHistoryAccompaniedByType
  adaptedEducationProgram: Boolean
  adoptionAge: Float
  ageDuringLossOfCloseIndividual: Float
  arrivalReason: [CaseHistoryArrivalReasonType]
  attendsKindergarten: Boolean
  caseStudyRowId: UUID!
  caseStudyTreatmentRowId: UUID

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  diagnosedIntelectualDevelopmentProblems: Boolean
  divorceOutcome: CaseHistoryDivorceOutcomeType
  divorcedParents: CaseHistoryDivorcedParentsType
  earlierProfessionalHelp: [MentalHealthProfessionalType]
  familyHeredity: String
  furtherAbuses: [CaseHistoryAbuseType]
  individualizedEducationProgram: Boolean
  involvedReferral: Boolean
  livesWith: [CaseHistoryLivesWithType]
  lossOfCloseIndividual: [CaseHistoryIndividualType]
  numberOfAdoptions: Int
  parentsInJail: CaseHistoryParentsInJailType
  previousTreatment: String
  ptsp: String
  reasonOfMultipleAdoptions: [CaseHistoryReasonOfMultipleAdoptionsType]
  referral: [CaseHistoryReferralType]
  referralDiagnosis: String
  reportedFurtherAbuses: CaseHistoryReportedAbuseType
  schoolMark: Int
}

"""The output of our `createCaseHistory` mutation."""
type CreateCaseHistoryPayload {
  caseHistory: CaseHistory

  """An edge for our `CaseHistory`. May be used by Relay 1."""
  caseHistoryEdge(
    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesEdge

  """Reads a single `CaseStudy` that is related to this `CaseHistory`."""
  caseStudyByCaseStudyRowId: CaseStudy!

  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseHistory`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByUpdatedBy: User
}

"""All input for the `createCaseStudyConclusionFile` mutation."""
input CreateCaseStudyConclusionFileInput {
  caseStudyConclusionRowId: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fileData: Base64EncodedBinary!
  fileName: String!
}

"""The output of our `createCaseStudyConclusionFile` mutation."""
type CreateCaseStudyConclusionFilePayload {
  """
  Reads a single `CaseStudyConclusion` that is related to this `CaseStudyConclusionFile`.
  """
  caseStudyConclusionByCaseStudyConclusionRowId: CaseStudyConclusion!
  caseStudyConclusionFile: CaseStudyConclusionFile

  """An edge for our `CaseStudyConclusionFile`. May be used by Relay 1."""
  caseStudyConclusionFileEdge(
    """The method to use when ordering `CaseStudyConclusionFile`."""
    orderBy: [CaseStudyConclusionFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionFilesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `File` that is related to this `CaseStudyConclusionFile`.
  """
  fileByFileRowId: File!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createCaseStudyConclusion` mutation."""
input CreateCaseStudyConclusionInput {
  caseStudyRowId: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  concludedAt: Datetime!
  description: String!
  type: CaseStudyConclusionType!
}

"""The output of our `createCaseStudyConclusion` mutation."""
type CreateCaseStudyConclusionPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyConclusion`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyConclusion: CaseStudyConclusion

  """An edge for our `CaseStudyConclusion`. May be used by Relay 1."""
  caseStudyConclusionEdge(
    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByUpdatedBy: User
}

"""All input for the `createCaseStudy` mutation."""
input CreateCaseStudyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  clientRowId: UUID
  groupRowId: UUID
  title: String!
}

"""All input for the `createCaseStudyMentalHealthProfessional` mutation."""
input CreateCaseStudyMentalHealthProfessionalInput {
  caseStudyRowId: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mentalHealthProfessionalRowId: UUID!
  primary: Boolean!
}

"""The output of our `createCaseStudyMentalHealthProfessional` mutation."""
type CreateCaseStudyMentalHealthProfessionalPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyMentalHealthProfessional: CaseStudyMentalHealthProfessional

  """
  An edge for our `CaseStudyMentalHealthProfessional`. May be used by Relay 1.
  """
  caseStudyMentalHealthProfessionalEdge(
    """The method to use when ordering `CaseStudyMentalHealthProfessional`."""
    orderBy: [CaseStudyMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyMentalHealthProfessionalsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `MentalHealthProfessional` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  mentalHealthProfessionalByMentalHealthProfessionalRowId: MentalHealthProfessional!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  userByCreatedBy: User!
}

"""The output of our `createCaseStudy` mutation."""
type CreateCaseStudyPayload {
  caseStudy: CaseStudy

  """An edge for our `CaseStudy`. May be used by Relay 1."""
  caseStudyEdge(
    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesEdge

  """Reads a single `Client` that is related to this `CaseStudy`."""
  clientByClientRowId: Client

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `CaseStudy`."""
  groupByGroupRowId: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByUpdatedBy: User
}

"""All input for the `createCaseStudyTreatmentFile` mutation."""
input CreateCaseStudyTreatmentFileInput {
  caseStudyTreatmentRowId: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  fileData: Base64EncodedBinary!
  fileName: String!
}

"""The output of our `createCaseStudyTreatmentFile` mutation."""
type CreateCaseStudyTreatmentFilePayload {
  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseStudyTreatmentFile`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment!
  caseStudyTreatmentFile: CaseStudyTreatmentFile

  """An edge for our `CaseStudyTreatmentFile`. May be used by Relay 1."""
  caseStudyTreatmentFileEdge(
    """The method to use when ordering `CaseStudyTreatmentFile`."""
    orderBy: [CaseStudyTreatmentFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentFilesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `File` that is related to this `CaseStudyTreatmentFile`.
  """
  fileByFileRowId: File!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createCaseStudyTreatment` mutation."""
input CreateCaseStudyTreatmentInput {
  caseStudyRowId: UUID!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  description: String
  endedAt: Datetime!
  external: Boolean!
  privateDescription: String
  score: Int
  startedAt: Datetime!
  title: String!
}

"""The output of our `createCaseStudyTreatment` mutation."""
type CreateCaseStudyTreatmentPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyTreatment`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyTreatment: CaseStudyTreatment

  """An edge for our `CaseStudyTreatment`. May be used by Relay 1."""
  caseStudyTreatmentEdge(
    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByUpdatedBy: User
}

"""
All input for the `createClientAssignedMentalHealthProfessional` mutation.
"""
input CreateClientAssignedMentalHealthProfessionalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  clientRowId: UUID!
  mentalHealthProfessionalRowId: UUID!
}

"""
The output of our `createClientAssignedMentalHealthProfessional` mutation.
"""
type CreateClientAssignedMentalHealthProfessionalPayload {
  clientAssignedMentalHealthProfessional: ClientAssignedMentalHealthProfessional

  """
  An edge for our `ClientAssignedMentalHealthProfessional`. May be used by Relay 1.
  """
  clientAssignedMentalHealthProfessionalEdge(
    """
    The method to use when ordering `ClientAssignedMentalHealthProfessional`.
    """
    orderBy: [ClientAssignedMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientAssignedMentalHealthProfessionalsEdge

  """
  Reads a single `Client` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  clientByClientRowId: Client!

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `MentalHealthProfessional` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  mentalHealthProfessionalByMentalHealthProfessionalRowId: MentalHealthProfessional!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  userByCreatedBy: User!
}

"""All input for the `createClient` mutation."""
input CreateClientInput {
  address: String!
  city: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dateOfBirth: Date!
  discrete: Boolean
  email: EmailAddress
  firstName: String!
  gender: Gender!
  lastName: String!
  number: Int!
  sentBy: ClientSentBy!
  telephone: String!
}

"""The output of our `createClient` mutation."""
type CreateClientPayload {
  client: Client

  """An edge for our `Client`. May be used by Relay 1."""
  clientEdge(
    """The method to use when ordering `Client`."""
    orderBy: [ClientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Client`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `Client`."""
  userByUpdatedBy: User
}

"""All input for the `createMentalHealthProfessional` mutation."""
input CreateMentalHealthProfessionalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dateOfBirth: Date!
  disabled: Boolean!
  email: EmailAddress!
  firstName: String!
  gender: Gender!
  lastName: String!
  title: String
  type: MentalHealthProfessionalType!
  userRowId: UUID
}

"""The output of our `createMentalHealthProfessional` mutation."""
type CreateMentalHealthProfessionalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  mentalHealthProfessional: MentalHealthProfessional

  """An edge for our `MentalHealthProfessional`. May be used by Relay 1."""
  mentalHealthProfessionalEdge(
    """The method to use when ordering `MentalHealthProfessional`."""
    orderBy: [MentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MentalHealthProfessionalsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `MentalHealthProfessional`.
  """
  userByUserRowId: User
}

"""UTC timestamp representing the time at which a node is created."""
scalar CreatedTimestamptz

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCaseHistoryFile` mutation."""
input DeleteCaseHistoryFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseHistoryFile` mutation."""
type DeleteCaseHistoryFilePayload {
  """
  Reads a single `CaseHistory` that is related to this `CaseHistoryFile`.
  """
  caseHistoryByCaseHistoryRowId: CaseHistory!
  caseHistoryFile: CaseHistoryFile

  """An edge for our `CaseHistoryFile`. May be used by Relay 1."""
  caseHistoryFileEdge(
    """The method to use when ordering `CaseHistoryFile`."""
    orderBy: [CaseHistoryFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoryFilesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `File` that is related to this `CaseHistoryFile`."""
  fileByFileRowId: File!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCaseHistory` mutation."""
input DeleteCaseHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseHistory` mutation."""
type DeleteCaseHistoryPayload {
  caseHistory: CaseHistory

  """An edge for our `CaseHistory`. May be used by Relay 1."""
  caseHistoryEdge(
    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesEdge

  """Reads a single `CaseStudy` that is related to this `CaseHistory`."""
  caseStudyByCaseStudyRowId: CaseStudy!

  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseHistory`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByUpdatedBy: User
}

"""All input for the `deleteCaseStudyConclusionFile` mutation."""
input DeleteCaseStudyConclusionFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseStudyConclusionFile` mutation."""
type DeleteCaseStudyConclusionFilePayload {
  """
  Reads a single `CaseStudyConclusion` that is related to this `CaseStudyConclusionFile`.
  """
  caseStudyConclusionByCaseStudyConclusionRowId: CaseStudyConclusion!
  caseStudyConclusionFile: CaseStudyConclusionFile

  """An edge for our `CaseStudyConclusionFile`. May be used by Relay 1."""
  caseStudyConclusionFileEdge(
    """The method to use when ordering `CaseStudyConclusionFile`."""
    orderBy: [CaseStudyConclusionFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionFilesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `File` that is related to this `CaseStudyConclusionFile`.
  """
  fileByFileRowId: File!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCaseStudyConclusion` mutation."""
input DeleteCaseStudyConclusionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseStudyConclusion` mutation."""
type DeleteCaseStudyConclusionPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyConclusion`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyConclusion: CaseStudyConclusion

  """An edge for our `CaseStudyConclusion`. May be used by Relay 1."""
  caseStudyConclusionEdge(
    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByUpdatedBy: User
}

"""All input for the `deleteCaseStudy` mutation."""
input DeleteCaseStudyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""All input for the `deleteCaseStudyMentalHealthProfessional` mutation."""
input DeleteCaseStudyMentalHealthProfessionalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseStudyMentalHealthProfessional` mutation."""
type DeleteCaseStudyMentalHealthProfessionalPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyMentalHealthProfessional: CaseStudyMentalHealthProfessional

  """
  An edge for our `CaseStudyMentalHealthProfessional`. May be used by Relay 1.
  """
  caseStudyMentalHealthProfessionalEdge(
    """The method to use when ordering `CaseStudyMentalHealthProfessional`."""
    orderBy: [CaseStudyMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyMentalHealthProfessionalsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `MentalHealthProfessional` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  mentalHealthProfessionalByMentalHealthProfessionalRowId: MentalHealthProfessional!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `CaseStudyMentalHealthProfessional`.
  """
  userByCreatedBy: User!
}

"""The output of our `deleteCaseStudy` mutation."""
type DeleteCaseStudyPayload {
  caseStudy: CaseStudy

  """An edge for our `CaseStudy`. May be used by Relay 1."""
  caseStudyEdge(
    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesEdge

  """Reads a single `Client` that is related to this `CaseStudy`."""
  clientByClientRowId: Client

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `CaseStudy`."""
  groupByGroupRowId: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByUpdatedBy: User
}

"""All input for the `deleteCaseStudyTreatmentFile` mutation."""
input DeleteCaseStudyTreatmentFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseStudyTreatmentFile` mutation."""
type DeleteCaseStudyTreatmentFilePayload {
  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseStudyTreatmentFile`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment!
  caseStudyTreatmentFile: CaseStudyTreatmentFile

  """An edge for our `CaseStudyTreatmentFile`. May be used by Relay 1."""
  caseStudyTreatmentFileEdge(
    """The method to use when ordering `CaseStudyTreatmentFile`."""
    orderBy: [CaseStudyTreatmentFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentFilesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `File` that is related to this `CaseStudyTreatmentFile`.
  """
  fileByFileRowId: File!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCaseStudyTreatment` mutation."""
input DeleteCaseStudyTreatmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteCaseStudyTreatment` mutation."""
type DeleteCaseStudyTreatmentPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyTreatment`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyTreatment: CaseStudyTreatment

  """An edge for our `CaseStudyTreatment`. May be used by Relay 1."""
  caseStudyTreatmentEdge(
    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByUpdatedBy: User
}

"""
All input for the `deleteClientAssignedMentalHealthProfessional` mutation.
"""
input DeleteClientAssignedMentalHealthProfessionalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""
The output of our `deleteClientAssignedMentalHealthProfessional` mutation.
"""
type DeleteClientAssignedMentalHealthProfessionalPayload {
  clientAssignedMentalHealthProfessional: ClientAssignedMentalHealthProfessional

  """
  An edge for our `ClientAssignedMentalHealthProfessional`. May be used by Relay 1.
  """
  clientAssignedMentalHealthProfessionalEdge(
    """
    The method to use when ordering `ClientAssignedMentalHealthProfessional`.
    """
    orderBy: [ClientAssignedMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientAssignedMentalHealthProfessionalsEdge

  """
  Reads a single `Client` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  clientByClientRowId: Client!

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `MentalHealthProfessional` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  mentalHealthProfessionalByMentalHealthProfessionalRowId: MentalHealthProfessional!

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ClientAssignedMentalHealthProfessional`.
  """
  userByCreatedBy: User!
}

"""All input for the `deleteClient` mutation."""
input DeleteClientInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteClient` mutation."""
type DeleteClientPayload {
  client: Client

  """An edge for our `Client`. May be used by Relay 1."""
  clientEdge(
    """The method to use when ordering `Client`."""
    orderBy: [ClientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Client`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `Client`."""
  userByUpdatedBy: User
}

"""All input for the `deleteFile` mutation."""
input DeleteFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteFile` mutation."""
type DeleteFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  file: File

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByCreatedBy: User!
}

"""All input for the `deleteMentalHealthProfessional` mutation."""
input DeleteMentalHealthProfessionalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
}

"""The output of our `deleteMentalHealthProfessional` mutation."""
type DeleteMentalHealthProfessionalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  mentalHealthProfessional: MentalHealthProfessional

  """An edge for our `MentalHealthProfessional`. May be used by Relay 1."""
  mentalHealthProfessionalEdge(
    """The method to use when ordering `MentalHealthProfessional`."""
    orderBy: [MentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MentalHealthProfessionalsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `MentalHealthProfessional`.
  """
  userByUserRowId: User
}

"""E-Mail address with simple plausability check."""
scalar EmailAddress

type File implements Node {
  """Reads and enables pagination through a set of `CaseHistoryFile`."""
  caseHistoryFilesByFileRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistoryFile`."""
    orderBy: [CaseHistoryFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoryFilesConnection!

  """
  Reads and enables pagination through a set of `CaseStudyConclusionFile`.
  """
  caseStudyConclusionFilesByFileRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusionFile`."""
    orderBy: [CaseStudyConclusionFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionFilesConnection!

  """
  Reads and enables pagination through a set of `CaseStudyTreatmentFile`.
  """
  caseStudyTreatmentFilesByFileRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatmentFile`."""
    orderBy: [CaseStudyTreatmentFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentFilesConnection!
  createdAt: CreatedTimestamptz!
  createdBy: UUID!
  data: Base64EncodedBinary!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  name: String!
  rowId: UUID!

  """Reads a single `User` that is related to this `File`."""
  userByCreatedBy: User!
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: UUID

  """Checks for equality with the object’s `data` field."""
  data: Base64EncodedBinary

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DATA_ASC
  DATA_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum Gender {
  FEMALE
  MALE
}

type Group implements Node {
  """Reads and enables pagination through a set of `CaseStudy`."""
  caseStudiesByGroupRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesConnection!
  createdAt: CreatedTimestamptz!
  description: String

  """Reads and enables pagination through a set of `GroupClient`."""
  groupClientsByGroupRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupClientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupClient`."""
    orderBy: [GroupClientsOrderBy!] = [NATURAL]
  ): GroupClientsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  number: Int!
  rowId: UUID!
  updatedAt: UpdatedTimestamptz!
}

type GroupClient {
  """Reads a single `Client` that is related to this `GroupClient`."""
  clientByClientRowId: Client!
  clientRowId: UUID!

  """Reads a single `Group` that is related to this `GroupClient`."""
  groupByGroupRowId: Group!
  groupRowId: UUID!
}

"""
A condition to be used against `GroupClient` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupClientCondition {
  """Checks for equality with the object’s `clientRowId` field."""
  clientRowId: UUID

  """Checks for equality with the object’s `groupRowId` field."""
  groupRowId: UUID
}

"""A connection to a list of `GroupClient` values."""
type GroupClientsConnection {
  """
  A list of edges which contains the `GroupClient` and cursor to aid in pagination.
  """
  edges: [GroupClientsEdge!]!

  """A list of `GroupClient` objects."""
  nodes: [GroupClient!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupClient` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupClient` edge in the connection."""
type GroupClientsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupClient` at the end of the edge."""
  node: GroupClient!
}

"""Methods to use when ordering `GroupClient`."""
enum GroupClientsOrderBy {
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  NATURAL
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `number` field."""
  number: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """A list of `Group` objects."""
  nodes: [Group!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group!
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NUMBER_ASC
  NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  query: Query
  user: User!
}

type MentalHealthProfessional implements Node {
  """
  Reads and enables pagination through a set of `CaseStudyMentalHealthProfessional`.
  """
  caseStudyMentalHealthProfessionalsByMentalHealthProfessionalRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyMentalHealthProfessional`."""
    orderBy: [CaseStudyMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyMentalHealthProfessionalsConnection!

  """
  Reads and enables pagination through a set of `ClientAssignedMentalHealthProfessional`.
  """
  clientAssignedMentalHealthProfessionalsByMentalHealthProfessionalRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientAssignedMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `ClientAssignedMentalHealthProfessional`.
    """
    orderBy: [ClientAssignedMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientAssignedMentalHealthProfessionalsConnection!
  createdAt: CreatedTimestamptz!
  dateOfBirth: Date!
  disabled: Boolean!
  email: EmailAddress!
  firstName: String!
  fullName: String!
  fulltext: String!
  gender: Gender!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  lastName: String!
  rowId: UUID!
  telephone: String
  title: String
  type: MentalHealthProfessionalType!
  updatedAt: UpdatedTimestamptz!

  """
  Reads a single `User` that is related to this `MentalHealthProfessional`.
  """
  userByUserRowId: User
  userRowId: UUID
}

"""
A condition to be used against `MentalHealthProfessional` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MentalHealthProfessionalCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `dateOfBirth` field."""
  dateOfBirth: Date

  """Checks for equality with the object’s `disabled` field."""
  disabled: Boolean

  """Checks for equality with the object’s `email` field."""
  email: EmailAddress

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `fulltext` field."""
  fulltext: String

  """Checks for equality with the object’s `gender` field."""
  gender: Gender

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `telephone` field."""
  telephone: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: MentalHealthProfessionalType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz

  """Checks for equality with the object’s `userRowId` field."""
  userRowId: UUID
}

enum MentalHealthProfessionalType {
  CLINICAL_PSYCHOLOGIST
  DEFECTOLOGIST
  LOGOPED
  NEUROLOGIST
  NEUROPSYCHIATRIST
  OTHER
  PEDAGOGUE
  PEDIATRIST
  PHONETICIAN
  PSYCHIATRIST
  PSYCHOLOGIST
  PSYCHOTHERAPIST
  SOCIAL_WORKER
  SUPERVISOR
}

"""A connection to a list of `MentalHealthProfessional` values."""
type MentalHealthProfessionalsConnection {
  """
  A list of edges which contains the `MentalHealthProfessional` and cursor to aid in pagination.
  """
  edges: [MentalHealthProfessionalsEdge!]!

  """A list of `MentalHealthProfessional` objects."""
  nodes: [MentalHealthProfessional!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MentalHealthProfessional` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MentalHealthProfessional` edge in the connection."""
type MentalHealthProfessionalsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MentalHealthProfessional` at the end of the edge."""
  node: MentalHealthProfessional!
}

"""Methods to use when ordering `MentalHealthProfessional`."""
enum MentalHealthProfessionalsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DATE_OF_BIRTH_ASC
  DATE_OF_BIRTH_DESC
  DISABLED_ASC
  DISABLED_DESC
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  FULLTEXT_ASC
  FULLTEXT_DESC
  GENDER_ASC
  GENDER_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TELEPHONE_ASC
  TELEPHONE_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

type MultidisciplinaryDiagnostic implements Node {
  """
  Reads a single `CaseStudy` that is related to this `MultidisciplinaryDiagnostic`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyRowId: UUID!

  """
  Reads a single `CaseStudyTreatment` that is related to this `MultidisciplinaryDiagnostic`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment
  caseStudyTreatmentRowId: UUID
  createdAt: CreatedTimestamptz!
  description: String

  """
  If the diagnostics hasP been performed outside the institution in focus.
  """
  external: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads and enables pagination through a set of `MultidisciplinaryDiagnosticReport`.
  """
  multidisciplinaryDiagnosticReportsByMultidisciplinaryDiagnosticRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryDiagnosticReportCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryDiagnosticReport`."""
    orderBy: [MultidisciplinaryDiagnosticReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryDiagnosticReportsConnection!

  """
  Reads and enables pagination through a set of `MultidisciplinaryTherapy`.
  """
  multidisciplinaryTherapiesByMultidisciplinaryDiagnosticRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryTherapyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryTherapy`."""
    orderBy: [MultidisciplinaryTherapiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryTherapiesConnection!

  """
  Reads a single `MultidisciplinaryTherapy` that is related to this `MultidisciplinaryDiagnostic`.
  """
  multidisciplinaryTherapyByMultidisciplinaryTherapyRowId: MultidisciplinaryTherapy
  multidisciplinaryTherapyRowId: UUID
  rowId: UUID!
  updatedAt: UpdatedTimestamptz!
}

"""
A condition to be used against `MultidisciplinaryDiagnostic` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MultidisciplinaryDiagnosticCondition {
  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `caseStudyTreatmentRowId` field."""
  caseStudyTreatmentRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `external` field."""
  external: Boolean

  """
  Checks for equality with the object’s `multidisciplinaryTherapyRowId` field.
  """
  multidisciplinaryTherapyRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz
}

type MultidisciplinaryDiagnosticReport implements Node {
  createdAt: CreatedTimestamptz!
  description: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  issuedAt: Datetime
  issuedTo: [MultidisciplinaryDiagnosticReportIssuedToType]

  """
  Reads a single `MultidisciplinaryDiagnostic` that is related to this `MultidisciplinaryDiagnosticReport`.
  """
  multidisciplinaryDiagnosticByMultidisciplinaryDiagnosticRowId: MultidisciplinaryDiagnostic!
  multidisciplinaryDiagnosticRowId: UUID!
  reportType: MultidisciplinaryDiagnosticReportType!
  reportUrl: String!
  rowId: UUID!
  updatedAt: UpdatedTimestamptz!
}

"""
A condition to be used against `MultidisciplinaryDiagnosticReport` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input MultidisciplinaryDiagnosticReportCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `issuedAt` field."""
  issuedAt: Datetime

  """Checks for equality with the object’s `issuedTo` field."""
  issuedTo: [MultidisciplinaryDiagnosticReportIssuedToType]

  """
  Checks for equality with the object’s `multidisciplinaryDiagnosticRowId` field.
  """
  multidisciplinaryDiagnosticRowId: UUID

  """Checks for equality with the object’s `reportType` field."""
  reportType: MultidisciplinaryDiagnosticReportType

  """Checks for equality with the object’s `reportUrl` field."""
  reportUrl: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz
}

enum MultidisciplinaryDiagnosticReportIssuedToType {
  CLIENT
  COURT
  FOSTER_HOUSE
  HOSPITAL
  KINDERGARTEN
  MENTAL_HEALTH_CENTER
  PARENT
  PEDIATRIST
  POLICE
  PSYCHIATRIST
  PSYCHOTHERAPIST
  SCHOOL
  SOCIAL_WORK_CENTER
}

enum MultidisciplinaryDiagnosticReportType {
  DEFECTOLOGICAL_REPORT
  MULTIDISCIPLINARY_REPORT
  NEUROLOGIC_REPORT
  PEDIATRIC_REPORT
  PSYCHIATRIC_REPORT
  PSYCHOLOGICAL_REPORT
  PSYCHOTHERAPEUTIC_REPORT
  SOCIAL_WORKER_REPORT
  T_O_V_A
}

"""A connection to a list of `MultidisciplinaryDiagnosticReport` values."""
type MultidisciplinaryDiagnosticReportsConnection {
  """
  A list of edges which contains the `MultidisciplinaryDiagnosticReport` and cursor to aid in pagination.
  """
  edges: [MultidisciplinaryDiagnosticReportsEdge!]!

  """A list of `MultidisciplinaryDiagnosticReport` objects."""
  nodes: [MultidisciplinaryDiagnosticReport!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MultidisciplinaryDiagnosticReport` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MultidisciplinaryDiagnosticReport` edge in the connection."""
type MultidisciplinaryDiagnosticReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MultidisciplinaryDiagnosticReport` at the end of the edge."""
  node: MultidisciplinaryDiagnosticReport!
}

"""Methods to use when ordering `MultidisciplinaryDiagnosticReport`."""
enum MultidisciplinaryDiagnosticReportsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  ISSUED_AT_ASC
  ISSUED_AT_DESC
  ISSUED_TO_ASC
  ISSUED_TO_DESC
  MULTIDISCIPLINARY_DIAGNOSTIC_ID_ASC
  MULTIDISCIPLINARY_DIAGNOSTIC_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORT_TYPE_ASC
  REPORT_TYPE_DESC
  REPORT_URL_ASC
  REPORT_URL_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `MultidisciplinaryDiagnostic` values."""
type MultidisciplinaryDiagnosticsConnection {
  """
  A list of edges which contains the `MultidisciplinaryDiagnostic` and cursor to aid in pagination.
  """
  edges: [MultidisciplinaryDiagnosticsEdge!]!

  """A list of `MultidisciplinaryDiagnostic` objects."""
  nodes: [MultidisciplinaryDiagnostic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MultidisciplinaryDiagnostic` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MultidisciplinaryDiagnostic` edge in the connection."""
type MultidisciplinaryDiagnosticsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MultidisciplinaryDiagnostic` at the end of the edge."""
  node: MultidisciplinaryDiagnostic!
}

"""Methods to use when ordering `MultidisciplinaryDiagnostic`."""
enum MultidisciplinaryDiagnosticsOrderBy {
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CASE_STUDY_TREATMENT_ID_ASC
  CASE_STUDY_TREATMENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EXTERNAL_ASC
  EXTERNAL_DESC
  ID_ASC
  ID_DESC
  MULTIDISCIPLINARY_THERAPY_ID_ASC
  MULTIDISCIPLINARY_THERAPY_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `MultidisciplinaryTherapy` values."""
type MultidisciplinaryTherapiesConnection {
  """
  A list of edges which contains the `MultidisciplinaryTherapy` and cursor to aid in pagination.
  """
  edges: [MultidisciplinaryTherapiesEdge!]!

  """A list of `MultidisciplinaryTherapy` objects."""
  nodes: [MultidisciplinaryTherapy!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MultidisciplinaryTherapy` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MultidisciplinaryTherapy` edge in the connection."""
type MultidisciplinaryTherapiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MultidisciplinaryTherapy` at the end of the edge."""
  node: MultidisciplinaryTherapy!
}

"""Methods to use when ordering `MultidisciplinaryTherapy`."""
enum MultidisciplinaryTherapiesOrderBy {
  CASE_STUDY_ID_ASC
  CASE_STUDY_ID_DESC
  CASE_STUDY_TREATMENT_ID_ASC
  CASE_STUDY_TREATMENT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EXTERNAL_ASC
  EXTERNAL_DESC
  ID_ASC
  ID_DESC
  MULTIDISCIPLINARY_DIAGNOSTIC_ID_ASC
  MULTIDISCIPLINARY_DIAGNOSTIC_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type MultidisciplinaryTherapy implements Node {
  """
  Reads a single `CaseStudy` that is related to this `MultidisciplinaryTherapy`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyRowId: UUID!

  """
  Reads a single `CaseStudyTreatment` that is related to this `MultidisciplinaryTherapy`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment
  caseStudyTreatmentRowId: UUID
  createdAt: CreatedTimestamptz!
  description: String

  """If the therapy has been performed outside the institution in focus."""
  external: Boolean!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `MultidisciplinaryDiagnostic` that is related to this `MultidisciplinaryTherapy`.
  """
  multidisciplinaryDiagnosticByMultidisciplinaryDiagnosticRowId: MultidisciplinaryDiagnostic
  multidisciplinaryDiagnosticRowId: UUID

  """
  Reads and enables pagination through a set of `MultidisciplinaryDiagnostic`.
  """
  multidisciplinaryDiagnosticsByMultidisciplinaryTherapyRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryDiagnosticCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryDiagnostic`."""
    orderBy: [MultidisciplinaryDiagnosticsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryDiagnosticsConnection!
  rowId: UUID!
  type: MultidisciplinaryTherapyType!
  updatedAt: UpdatedTimestamptz!
}

"""
A condition to be used against `MultidisciplinaryTherapy` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MultidisciplinaryTherapyCondition {
  """Checks for equality with the object’s `caseStudyRowId` field."""
  caseStudyRowId: UUID

  """Checks for equality with the object’s `caseStudyTreatmentRowId` field."""
  caseStudyTreatmentRowId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `external` field."""
  external: Boolean

  """
  Checks for equality with the object’s `multidisciplinaryDiagnosticRowId` field.
  """
  multidisciplinaryDiagnosticRowId: UUID

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `type` field."""
  type: MultidisciplinaryTherapyType

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz
}

enum MultidisciplinaryTherapyType {
  ANTIDEPRESIVE_PSYCHOPHARMACOTHERAPY
  ANTIEPILEPTIC_PHARMACOTHERAPY
  ANTIPSYCHOTIC_PSYCHOPHARMACOTHERAPY
  ANXIOLYTIC_PSYCHOPHARMACOTHERAPY
  ATTACHMENT_BASIC_FAMILY_THERAPY
  ATTACHMENT_THERAPY
  COUNSELING_THERAPY
  COUPLE_THERAPY
  COURT_EDUCATION
  DEFECTOLOGY_THERAPY
  EYE_MOVEMENT_DESENSITIZATION_AND_REPROCESSING_THERAPY
  FAMILY_THERAPY
  FORENSICALLY_SENSITIVE_THERAPY
  GROUP_THERAPY
  INDIVIDUAL_COGNITIVE_BEHAVIOURAL_THERAPY
  INDIVIDUAL_GESTALT_THERAPY
  INDIVIDUAL_INTEGRATIVE_THERAPY
  INDIVIDUAL_PSYCHOANALYTIC_THERAPY
  KINDERGARTEN_EDUCATION
  MOOD_STABILIZER_PSYCHOPHARMACOTHERAPY
  OCUPATIONAL_THERAPY
  PARENTAL_THERAPY
  PHARMACOTHERAPY
  PHONETIC_THERAPY
  PLAY_ATTENTION_THERAPY
  PSYCHOEDUCATIONAL_THERAPY
  SCHOOL_EDUCATION
  SOCIAL_CENTER_EDUCATION
  TRAUMA_FOCUS_COGNITIVE_BEHAVIOURAL_THERAPY
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  createCaseHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseHistoryInput!
  ): CreateCaseHistoryPayload
  createCaseHistoryFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseHistoryFileInput!
  ): CreateCaseHistoryFilePayload
  createCaseStudy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseStudyInput!
  ): CreateCaseStudyPayload
  createCaseStudyConclusion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseStudyConclusionInput!
  ): CreateCaseStudyConclusionPayload
  createCaseStudyConclusionFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseStudyConclusionFileInput!
  ): CreateCaseStudyConclusionFilePayload
  createCaseStudyMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseStudyMentalHealthProfessionalInput!
  ): CreateCaseStudyMentalHealthProfessionalPayload
  createCaseStudyTreatment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseStudyTreatmentInput!
  ): CreateCaseStudyTreatmentPayload
  createCaseStudyTreatmentFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCaseStudyTreatmentFileInput!
  ): CreateCaseStudyTreatmentFilePayload
  createClient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateClientInput!
  ): CreateClientPayload
  createClientAssignedMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateClientAssignedMentalHealthProfessionalInput!
  ): CreateClientAssignedMentalHealthProfessionalPayload
  createMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMentalHealthProfessionalInput!
  ): CreateMentalHealthProfessionalPayload
  deleteCaseHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseHistoryInput!
  ): DeleteCaseHistoryPayload
  deleteCaseHistoryFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseHistoryFileInput!
  ): DeleteCaseHistoryFilePayload
  deleteCaseStudy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseStudyInput!
  ): DeleteCaseStudyPayload
  deleteCaseStudyConclusion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseStudyConclusionInput!
  ): DeleteCaseStudyConclusionPayload
  deleteCaseStudyConclusionFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseStudyConclusionFileInput!
  ): DeleteCaseStudyConclusionFilePayload
  deleteCaseStudyMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseStudyMentalHealthProfessionalInput!
  ): DeleteCaseStudyMentalHealthProfessionalPayload
  deleteCaseStudyTreatment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseStudyTreatmentInput!
  ): DeleteCaseStudyTreatmentPayload
  deleteCaseStudyTreatmentFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCaseStudyTreatmentFileInput!
  ): DeleteCaseStudyTreatmentFilePayload
  deleteClient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteClientInput!
  ): DeleteClientPayload
  deleteClientAssignedMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteClientAssignedMentalHealthProfessionalInput!
  ): DeleteClientAssignedMentalHealthProfessionalPayload
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload
  deleteMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMentalHealthProfessionalInput!
  ): DeleteMentalHealthProfessionalPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
  logout: Boolean!
  logoutOthers: Boolean!

  """Creates a new `User` which can log in."""
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  updateCaseHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaseHistoryInput!
  ): UpdateCaseHistoryPayload
  updateCaseStudy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaseStudyInput!
  ): UpdateCaseStudyPayload
  updateCaseStudyConclusion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaseStudyConclusionInput!
  ): UpdateCaseStudyConclusionPayload
  updateCaseStudyTreatment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCaseStudyTreatmentInput!
  ): UpdateCaseStudyTreatmentPayload
  updateClient(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateClientInput!
  ): UpdateClientPayload
  updateMentalHealthProfessional(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMentalHealthProfessionalInput!
  ): UpdateMentalHealthProfessionalPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Assistant`."""
  allAssistants(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssistantCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Assistant`."""
    orderBy: [AssistantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssistantsConnection

  """Reads and enables pagination through a set of `CaseHistory`."""
  allCaseHistories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesConnection

  """Reads and enables pagination through a set of `CaseHistoryFile`."""
  allCaseHistoryFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistoryFile`."""
    orderBy: [CaseHistoryFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoryFilesConnection

  """Reads and enables pagination through a set of `CaseStudy`."""
  allCaseStudies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesConnection

  """
  Reads and enables pagination through a set of `CaseStudyConclusionFile`.
  """
  allCaseStudyConclusionFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusionFile`."""
    orderBy: [CaseStudyConclusionFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionFilesConnection

  """Reads and enables pagination through a set of `CaseStudyConclusion`."""
  allCaseStudyConclusions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsConnection

  """
  Reads and enables pagination through a set of `CaseStudyMentalHealthProfessional`.
  """
  allCaseStudyMentalHealthProfessionals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyMentalHealthProfessional`."""
    orderBy: [CaseStudyMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyMentalHealthProfessionalsConnection

  """Reads and enables pagination through a set of `CaseStudyRelation`."""
  allCaseStudyRelations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyRelation`."""
    orderBy: [CaseStudyRelationsOrderBy!] = [NATURAL]
  ): CaseStudyRelationsConnection

  """
  Reads and enables pagination through a set of `CaseStudyTreatmentFile`.
  """
  allCaseStudyTreatmentFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentFileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatmentFile`."""
    orderBy: [CaseStudyTreatmentFilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentFilesConnection

  """Reads and enables pagination through a set of `CaseStudyTreatment`."""
  allCaseStudyTreatments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsConnection

  """
  Reads and enables pagination through a set of `ClientAssignedMentalHealthProfessional`.
  """
  allClientAssignedMentalHealthProfessionals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientAssignedMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `ClientAssignedMentalHealthProfessional`.
    """
    orderBy: [ClientAssignedMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientAssignedMentalHealthProfessionalsConnection

  """Reads and enables pagination through a set of `Client`."""
  allClients(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Client`."""
    orderBy: [ClientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientsConnection

  """Reads and enables pagination through a set of `File`."""
  allFiles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection

  """Reads and enables pagination through a set of `GroupClient`."""
  allGroupClients(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupClientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupClient`."""
    orderBy: [GroupClientsOrderBy!] = [NATURAL]
  ): GroupClientsConnection

  """Reads and enables pagination through a set of `Group`."""
  allGroups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection

  """
  Reads and enables pagination through a set of `MentalHealthProfessional`.
  """
  allMentalHealthProfessionals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MentalHealthProfessional`."""
    orderBy: [MentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MentalHealthProfessionalsConnection

  """
  Reads and enables pagination through a set of `MultidisciplinaryDiagnosticReport`.
  """
  allMultidisciplinaryDiagnosticReports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryDiagnosticReportCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryDiagnosticReport`."""
    orderBy: [MultidisciplinaryDiagnosticReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryDiagnosticReportsConnection

  """
  Reads and enables pagination through a set of `MultidisciplinaryDiagnostic`.
  """
  allMultidisciplinaryDiagnostics(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryDiagnosticCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryDiagnostic`."""
    orderBy: [MultidisciplinaryDiagnosticsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryDiagnosticsConnection

  """
  Reads and enables pagination through a set of `MultidisciplinaryTherapy`.
  """
  allMultidisciplinaryTherapies(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MultidisciplinaryTherapyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MultidisciplinaryTherapy`."""
    orderBy: [MultidisciplinaryTherapiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MultidisciplinaryTherapiesConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  """Reads a single `Assistant` using its globally unique `ID`."""
  assistant(
    """The globally unique `ID` to be used in selecting a single `Assistant`."""
    id: ID!
  ): Assistant
  assistantByEmail(email: EmailAddress!): Assistant
  assistantByFirstNameAndLastNameAndDateOfBirth(dateOfBirth: Date!, firstName: String!, lastName: String!): Assistant
  assistantByRowId(rowId: UUID!): Assistant
  assistantByUserRowId(userRowId: UUID!): Assistant

  """Reads a single `CaseHistory` using its globally unique `ID`."""
  caseHistory(
    """
    The globally unique `ID` to be used in selecting a single `CaseHistory`.
    """
    id: ID!
  ): CaseHistory
  caseHistoryByRowId(rowId: UUID!): CaseHistory

  """Reads a single `CaseHistoryFile` using its globally unique `ID`."""
  caseHistoryFile(
    """
    The globally unique `ID` to be used in selecting a single `CaseHistoryFile`.
    """
    id: ID!
  ): CaseHistoryFile
  caseHistoryFileByRowId(rowId: UUID!): CaseHistoryFile

  """Reads a single `CaseStudy` using its globally unique `ID`."""
  caseStudy(
    """The globally unique `ID` to be used in selecting a single `CaseStudy`."""
    id: ID!
  ): CaseStudy
  caseStudyByRowId(rowId: UUID!): CaseStudy

  """Reads a single `CaseStudyConclusion` using its globally unique `ID`."""
  caseStudyConclusion(
    """
    The globally unique `ID` to be used in selecting a single `CaseStudyConclusion`.
    """
    id: ID!
  ): CaseStudyConclusion
  caseStudyConclusionByCaseStudyRowId(caseStudyRowId: UUID!): CaseStudyConclusion
  caseStudyConclusionByRowId(rowId: UUID!): CaseStudyConclusion

  """
  Reads a single `CaseStudyConclusionFile` using its globally unique `ID`.
  """
  caseStudyConclusionFile(
    """
    The globally unique `ID` to be used in selecting a single `CaseStudyConclusionFile`.
    """
    id: ID!
  ): CaseStudyConclusionFile
  caseStudyConclusionFileByRowId(rowId: UUID!): CaseStudyConclusionFile

  """
  Reads a single `CaseStudyMentalHealthProfessional` using its globally unique `ID`.
  """
  caseStudyMentalHealthProfessional(
    """
    The globally unique `ID` to be used in selecting a single `CaseStudyMentalHealthProfessional`.
    """
    id: ID!
  ): CaseStudyMentalHealthProfessional
  caseStudyMentalHealthProfessionalByCaseStudyRowIdAndMentalHealthProfessionalRowId(caseStudyRowId: UUID!, mentalHealthProfessionalRowId: UUID!): CaseStudyMentalHealthProfessional
  caseStudyMentalHealthProfessionalByRowId(rowId: UUID!): CaseStudyMentalHealthProfessional

  """Reads a single `CaseStudyTreatment` using its globally unique `ID`."""
  caseStudyTreatment(
    """
    The globally unique `ID` to be used in selecting a single `CaseStudyTreatment`.
    """
    id: ID!
  ): CaseStudyTreatment
  caseStudyTreatmentByRowId(rowId: UUID!): CaseStudyTreatment

  """
  Reads a single `CaseStudyTreatmentFile` using its globally unique `ID`.
  """
  caseStudyTreatmentFile(
    """
    The globally unique `ID` to be used in selecting a single `CaseStudyTreatmentFile`.
    """
    id: ID!
  ): CaseStudyTreatmentFile
  caseStudyTreatmentFileByRowId(rowId: UUID!): CaseStudyTreatmentFile

  """Reads a single `Client` using its globally unique `ID`."""
  client(
    """The globally unique `ID` to be used in selecting a single `Client`."""
    id: ID!
  ): Client

  """
  Reads a single `ClientAssignedMentalHealthProfessional` using its globally unique `ID`.
  """
  clientAssignedMentalHealthProfessional(
    """
    The globally unique `ID` to be used in selecting a single `ClientAssignedMentalHealthProfessional`.
    """
    id: ID!
  ): ClientAssignedMentalHealthProfessional
  clientAssignedMentalHealthProfessionalByClientRowIdAndMentalHealthProfessionalRowId(clientRowId: UUID!, mentalHealthProfessionalRowId: UUID!): ClientAssignedMentalHealthProfessional
  clientAssignedMentalHealthProfessionalByRowId(rowId: UUID!): ClientAssignedMentalHealthProfessional
  clientByFirstNameAndLastNameAndDateOfBirth(dateOfBirth: Date!, firstName: String!, lastName: String!): Client
  clientByNumber(number: Int!): Client
  clientByRowId(rowId: UUID!): Client

  """Reads a single `File` using its globally unique `ID`."""
  file(
    """The globally unique `ID` to be used in selecting a single `File`."""
    id: ID!
  ): File
  fileByRowId(rowId: UUID!): File

  """Reads and enables pagination through a set of `Client`."""
  filterClients(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int
    gender: Gender

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    searchText: String
    sentBy: ClientSentBy
  ): ClientsConnection!

  """
  Reads and enables pagination through a set of `MentalHealthProfessional`.
  """
  filterMentalHealthProfessionals(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    disabled: Boolean

    """Only read the first `n` values of the set."""
    first: Int
    gender: Gender

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    searchText: String
  ): MentalHealthProfessionalsConnection!

  """Reads and enables pagination through a set of `User`."""
  filterUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor
    disabled: Boolean

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    searchText: String
  ): UsersConnection!

  """Reads a single `Group` using its globally unique `ID`."""
  group(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    id: ID!
  ): Group
  groupByRowId(rowId: UUID!): Group

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """
  Reads a single `MentalHealthProfessional` using its globally unique `ID`.
  """
  mentalHealthProfessional(
    """
    The globally unique `ID` to be used in selecting a single `MentalHealthProfessional`.
    """
    id: ID!
  ): MentalHealthProfessional
  mentalHealthProfessionalByEmail(email: EmailAddress!): MentalHealthProfessional
  mentalHealthProfessionalByFirstNameAndLastNameAndDateOfBirth(dateOfBirth: Date!, firstName: String!, lastName: String!): MentalHealthProfessional
  mentalHealthProfessionalByRowId(rowId: UUID!): MentalHealthProfessional
  mentalHealthProfessionalByUserRowId(userRowId: UUID!): MentalHealthProfessional

  """
  Reads a single `MultidisciplinaryDiagnostic` using its globally unique `ID`.
  """
  multidisciplinaryDiagnostic(
    """
    The globally unique `ID` to be used in selecting a single `MultidisciplinaryDiagnostic`.
    """
    id: ID!
  ): MultidisciplinaryDiagnostic
  multidisciplinaryDiagnosticByRowId(rowId: UUID!): MultidisciplinaryDiagnostic

  """
  Reads a single `MultidisciplinaryDiagnosticReport` using its globally unique `ID`.
  """
  multidisciplinaryDiagnosticReport(
    """
    The globally unique `ID` to be used in selecting a single `MultidisciplinaryDiagnosticReport`.
    """
    id: ID!
  ): MultidisciplinaryDiagnosticReport
  multidisciplinaryDiagnosticReportByRowId(rowId: UUID!): MultidisciplinaryDiagnosticReport

  """
  Reads a single `MultidisciplinaryTherapy` using its globally unique `ID`.
  """
  multidisciplinaryTherapy(
    """
    The globally unique `ID` to be used in selecting a single `MultidisciplinaryTherapy`.
    """
    id: ID!
  ): MultidisciplinaryTherapy
  multidisciplinaryTherapyByRowId(rowId: UUID!): MultidisciplinaryTherapy

  """Next auto-generated available `Client` number."""
  nextAvailableClientNumber: Int!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User
  userByEmail(email: EmailAddress!): User
  userByRowId(rowId: UUID!): User

  """Currently authenticated `User`."""
  viewer: User
  viewerUserId: UUID
}

"""All input for the `register` mutation."""
input RegisterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  isAdmin: Boolean
  password: String!
  rowId: UUID
}

"""The output of our `register` mutation."""
type RegisterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""All input for the `updateCaseHistory` mutation."""
input UpdateCaseHistoryInput {
  accompaniedBy: CaseHistoryAccompaniedByType
  adaptedEducationProgram: Boolean
  adoptionAge: Float
  ageDuringLossOfCloseIndividual: Float
  arrivalReason: [CaseHistoryArrivalReasonType]
  attendsKindergarten: Boolean
  caseStudyTreatmentRowId: UUID

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  diagnosedIntelectualDevelopmentProblems: Boolean
  divorceOutcome: CaseHistoryDivorceOutcomeType
  divorcedParents: CaseHistoryDivorcedParentsType
  earlierProfessionalHelp: [MentalHealthProfessionalType]
  familyHeredity: String
  furtherAbuses: [CaseHistoryAbuseType]
  individualizedEducationProgram: Boolean
  involvedReferral: Boolean
  livesWith: [CaseHistoryLivesWithType]
  lossOfCloseIndividual: [CaseHistoryIndividualType]
  numberOfAdoptions: Int
  parentsInJail: CaseHistoryParentsInJailType
  previousTreatment: String
  ptsp: String
  reasonOfMultipleAdoptions: [CaseHistoryReasonOfMultipleAdoptionsType]
  referral: [CaseHistoryReferralType]
  referralDiagnosis: String
  reportedFurtherAbuses: CaseHistoryReportedAbuseType
  rowId: UUID!
  schoolMark: Int
}

"""The output of our `updateCaseHistory` mutation."""
type UpdateCaseHistoryPayload {
  caseHistory: CaseHistory

  """An edge for our `CaseHistory`. May be used by Relay 1."""
  caseHistoryEdge(
    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesEdge

  """Reads a single `CaseStudy` that is related to this `CaseHistory`."""
  caseStudyByCaseStudyRowId: CaseStudy!

  """
  Reads a single `CaseStudyTreatment` that is related to this `CaseHistory`.
  """
  caseStudyTreatmentByCaseStudyTreatmentRowId: CaseStudyTreatment

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseHistory`."""
  userByUpdatedBy: User
}

"""All input for the `updateCaseStudyConclusion` mutation."""
input UpdateCaseStudyConclusionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  concludedAt: Datetime!
  description: String!
  rowId: UUID!
  type: CaseStudyConclusionType!
}

"""The output of our `updateCaseStudyConclusion` mutation."""
type UpdateCaseStudyConclusionPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyConclusion`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyConclusion: CaseStudyConclusion

  """An edge for our `CaseStudyConclusion`. May be used by Relay 1."""
  caseStudyConclusionEdge(
    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyConclusion`."""
  userByUpdatedBy: User
}

"""All input for the `updateCaseStudy` mutation."""
input UpdateCaseStudyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: UUID!
  title: String!
}

"""The output of our `updateCaseStudy` mutation."""
type UpdateCaseStudyPayload {
  caseStudy: CaseStudy

  """An edge for our `CaseStudy`. May be used by Relay 1."""
  caseStudyEdge(
    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesEdge

  """Reads a single `Client` that is related to this `CaseStudy`."""
  clientByClientRowId: Client

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `CaseStudy`."""
  groupByGroupRowId: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudy`."""
  userByUpdatedBy: User
}

"""All input for the `updateCaseStudyTreatment` mutation."""
input UpdateCaseStudyTreatmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  description: String
  endedAt: Datetime!
  external: Boolean!
  privateDescription: String
  rowId: UUID!
  score: Int
  startedAt: Datetime!
  title: String!
}

"""The output of our `updateCaseStudyTreatment` mutation."""
type UpdateCaseStudyTreatmentPayload {
  """
  Reads a single `CaseStudy` that is related to this `CaseStudyTreatment`.
  """
  caseStudyByCaseStudyRowId: CaseStudy!
  caseStudyTreatment: CaseStudyTreatment

  """An edge for our `CaseStudyTreatment`. May be used by Relay 1."""
  caseStudyTreatmentEdge(
    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `CaseStudyTreatment`."""
  userByUpdatedBy: User
}

"""All input for the `updateClient` mutation."""
input UpdateClientInput {
  address: String!
  city: String!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dateOfBirth: Date!
  discrete: Boolean
  email: EmailAddress
  firstName: String!
  gender: Gender!
  lastName: String!
  number: Int!
  rowId: UUID!
  sentBy: ClientSentBy!
  telephone: String!
}

"""The output of our `updateClient` mutation."""
type UpdateClientPayload {
  client: Client

  """An edge for our `Client`. May be used by Relay 1."""
  clientEdge(
    """The method to use when ordering `Client`."""
    orderBy: [ClientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Client`."""
  userByCreatedBy: User!

  """Reads a single `User` that is related to this `Client`."""
  userByUpdatedBy: User
}

"""All input for the `updateMentalHealthProfessional` mutation."""
input UpdateMentalHealthProfessionalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dateOfBirth: Date!
  disabled: Boolean!
  email: EmailAddress!
  firstName: String!
  gender: Gender!
  lastName: String!
  rowId: UUID!
  title: String
  type: MentalHealthProfessionalType!
  userRowId: UUID
}

"""The output of our `updateMentalHealthProfessional` mutation."""
type UpdateMentalHealthProfessionalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  mentalHealthProfessional: MentalHealthProfessional

  """An edge for our `MentalHealthProfessional`. May be used by Relay 1."""
  mentalHealthProfessionalEdge(
    """The method to use when ordering `MentalHealthProfessional`."""
    orderBy: [MentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MentalHealthProfessionalsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `MentalHealthProfessional`.
  """
  userByUserRowId: User
}

"""UTC timestamp representing the time at which a node is updated."""
scalar UpdatedTimestamptz

type User implements Node {
  """Reads a single `Assistant` that is related to this `User`."""
  assistantByUserRowId: Assistant

  """Reads and enables pagination through a set of `Assistant`."""
  assistantsByUserRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssistantCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Assistant`."""
    orderBy: [AssistantsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssistantsConnection! @deprecated(reason: "Please use assistantByUserRowId instead")

  """Reads and enables pagination through a set of `CaseHistory`."""
  caseHistoriesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesConnection!

  """Reads and enables pagination through a set of `CaseHistory`."""
  caseHistoriesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseHistoryCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseHistory`."""
    orderBy: [CaseHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseHistoriesConnection!

  """Reads and enables pagination through a set of `CaseStudy`."""
  caseStudiesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesConnection!

  """Reads and enables pagination through a set of `CaseStudy`."""
  caseStudiesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudy`."""
    orderBy: [CaseStudiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudiesConnection!

  """Reads and enables pagination through a set of `CaseStudyConclusion`."""
  caseStudyConclusionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsConnection!

  """Reads and enables pagination through a set of `CaseStudyConclusion`."""
  caseStudyConclusionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyConclusionCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyConclusion`."""
    orderBy: [CaseStudyConclusionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyConclusionsConnection!

  """
  Reads and enables pagination through a set of `CaseStudyMentalHealthProfessional`.
  """
  caseStudyMentalHealthProfessionalsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyMentalHealthProfessional`."""
    orderBy: [CaseStudyMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyMentalHealthProfessionalsConnection!

  """Reads and enables pagination through a set of `CaseStudyRelation`."""
  caseStudyRelationsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyRelationCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyRelation`."""
    orderBy: [CaseStudyRelationsOrderBy!] = [NATURAL]
  ): CaseStudyRelationsConnection!

  """Reads and enables pagination through a set of `CaseStudyTreatment`."""
  caseStudyTreatmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsConnection!

  """Reads and enables pagination through a set of `CaseStudyTreatment`."""
  caseStudyTreatmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CaseStudyTreatmentCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CaseStudyTreatment`."""
    orderBy: [CaseStudyTreatmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CaseStudyTreatmentsConnection!

  """
  Reads and enables pagination through a set of `ClientAssignedMentalHealthProfessional`.
  """
  clientAssignedMentalHealthProfessionalsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientAssignedMentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    The method to use when ordering `ClientAssignedMentalHealthProfessional`.
    """
    orderBy: [ClientAssignedMentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientAssignedMentalHealthProfessionalsConnection!

  """Reads and enables pagination through a set of `Client`."""
  clientsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Client`."""
    orderBy: [ClientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientsConnection!

  """Reads and enables pagination through a set of `Client`."""
  clientsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ClientCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Client`."""
    orderBy: [ClientsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ClientsConnection!
  createdAt: CreatedTimestamptz!
  email: EmailAddress!

  """Reads and enables pagination through a set of `File`."""
  filesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  isAdmin: Boolean!
  isAssistant: Boolean!
  isMentalHealthProfessional: Boolean!

  """
  Reads a single `MentalHealthProfessional` that is related to this `User`.
  """
  mentalHealthProfessionalByUserRowId: MentalHealthProfessional

  """
  Reads and enables pagination through a set of `MentalHealthProfessional`.
  """
  mentalHealthProfessionalsByUserRowId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MentalHealthProfessionalCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MentalHealthProfessional`."""
    orderBy: [MentalHealthProfessionalsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MentalHealthProfessionalsConnection! @deprecated(reason: "Please use mentalHealthProfessionalByUserRowId instead")
  rowId: UUID!
  updatedAt: UpdatedTimestamptz!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: CreatedTimestamptz

  """Checks for equality with the object’s `email` field."""
  email: EmailAddress

  """Checks for equality with the object’s `rowId` field."""
  rowId: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: UpdatedTimestamptz
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}
